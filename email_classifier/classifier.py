from transformers import pipeline
import nltk
from nltk.corpus import stopwords
import re
import requests
import json
import os
from dotenv import load_dotenv
import random
from datetime import datetime
import openai  # ‚úÖ OpenAI mais est√°vel

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

# Inicializa√ß√µes
nltk.download('stopwords')
stop_words = set(stopwords.words('portuguese'))

# Pipeline de classifica√ß√£o
classifier = pipeline("zero-shot-classification", 
                     model="MoritzLaurer/deberta-v3-base-zeroshot-v2.0")

# Categorias para classifica√ß√£o
LABELS = [
    "solicita√ß√£o de suporte t√©cnico, problema urgente, erro no sistema, aus√™ncia, problema de sa√∫de, emerg√™ncia, ajuda necess√°ria",
    "mensagem de cumprimento, felicita√ß√µes, agradecimentos, desejos, parab√©ns, reconhecimento, elogios"
]

# Configura√ß√£o da OpenAI
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Configurar OpenAI se a chave existir
if OPENAI_API_KEY and OPENAI_API_KEY != 'sua_chave_openai_aqui':
    openai.api_key = OPENAI_API_KEY
    print("‚úÖ OpenAI configurada")
else:
    print("‚ö†Ô∏è  OpenAI n√£o configurada - usando fallback")

def preprocess_text(texto: str) -> str:
    """Pr√©-processamento do texto"""
    texto = texto.lower()
    texto = re.sub(r'[^a-z√°√†√¢√£√©√®√™√≠√Ø√≥√¥√µ√∂√∫√ß√±\s]', ' ', texto)
    palavras = [p for p in texto.split() if p not in stop_words and len(p) > 2]
    return " ".join(palavras)

def classify_email(texto: str) -> str:
    """Classifica√ß√£o do email com contexto melhorado"""
    texto_prep = preprocess_text(texto)
    prompt = f"Classifique este email considerando o contexto completo: {texto_prep}"
    
    resultado = classifier(prompt, candidate_labels=LABELS)
    
    # Verificar confian√ßa
    if resultado["scores"][0] > 0.6:
        if any(keyword in resultado["labels"][0] for keyword in ["solicita√ß√£o", "problema", "urgente", "aus√™ncia", "sa√∫de", "emerg√™ncia", "ajuda"]):
            return "Produtivo"
        else:
            return "Improdutivo"
    else:
        # Fallback por palavras-chave com contexto melhorado
        # PRIORIDADE: Verificar primeiro se √© sobre sa√∫de/aus√™ncia
        palavras_saude = [
            'indisgest√£o', 'enjoo', 'n√°usea', 'mal estar', 'febre', 'gripe', 'resfriado', 
            'temperatura', 'dor', 'doente', 'sa√∫de', 'm√©dico', 'hospital', 'indisposi√ß√£o',
            'ausente', 'aus√™ncia', 'licen√ßa', 'atestado', 'consulta', 'recupera√ß√£o',
            'medicamento', 'rem√©dio', 'sintoma', 'v√¥mito', 'diarr√©ia', 'diarreia', 'passando mal'
        ]
        
        palavras_produtivo = [
            'problema', 'erro', 'travou', 'urgente', 'ajuda', 'suporte', 'sistema', 
            'relat√≥rio', 'n√£o consigo', 'emerg√™ncia', 'falha', 'bug', 'comparecer', 
            'reuni√£o', 'entregar', 'preciso', 'necessito', 'importante', 'prioridade', 
            'filho', 'filha', 'filhos', 'familia', 'familiar', 'lento', 'congelou', 
            'offline', 'quebrado', 'defeito', 'n√£o funciona', 'servidor', 'offline'
        ]
        
        palavras_improdutivo = [
            'feliz', 'natal', 'ano novo', 'parab√©ns', 'obrigado', 'agrade√ßo', 
            'desejo', 'cumprimentos', 'agradecimento', 'comemora√ß√£o', 'festas',
            'apoio', 'melhor', 'agradecer', 'reconhecimento', 'bom dia', 'boa tarde', 
            'boa noite', 'elogio', 'excelente', 'fant√°stico', 'incr√≠vel', 'maravilhoso', 
            '√≥timo', 'perfeito', 'adorei', 'amei'
        ]
        
        texto_lower = texto.lower()
        
        # PRIMEIRO verificar se √© sobre sa√∫de/aus√™ncia (prioridade m√°xima)
        saude_count = sum(1 for p in palavras_saude if p in texto_lower)
        if saude_count > 0:
            return "Produtivo"
        
        # Depois verificar outros tipos produtivos
        produtivo_count = sum(1 for p in palavras_produtivo if p in texto_lower)
        improdutivo_count = sum(1 for p in palavras_improdutivo if p in texto_lower)
        
        # Se for claro, retornar a categoria com mais ocorr√™ncias
        if produtivo_count > improdutivo_count:
            return "Produtivo"
        elif improdutivo_count > produtivo_count:
            return "Improdutivo"
        else:
            # Se empate, analisar contexto mais profundamente
            if any(ctx in texto_lower for ctx in ['preciso', 'necessito', 'urgente', 'problema', 'ajuda', 'ausent']):
                return "Produtivo"
            else:
                return "Improdutivo"

def gerar_resposta(categoria: str, email_texto: str) -> str:
    """Gera√ß√£o de resposta usando IA real"""
    
    # Tentar OpenAI primeiro (mais confi√°vel)
    if OPENAI_API_KEY and OPENAI_API_KEY != 'sua_chave_openai_aqui':
        try:
            resposta = gerar_resposta_openai(categoria, email_texto)
            if resposta and len(resposta) > 10:
                print("‚úÖ Resposta gerada por OpenAI")
                return resposta
        except Exception as e:
            print(f"‚ùå Erro OpenAI: {e}")
    
    # Usar fallback inteligente
    print("üéØ Usando sistema de fallback inteligente")
    return gerar_resposta_avancada(categoria, email_texto)

def gerar_resposta_openai(categoria: str, email_texto: str) -> str:
    """Gera√ß√£o de resposta usando OpenAI API"""
    try:
        prompt = f"""
        Gere uma resposta profissional em portugu√™s do Brasil para um email classificado como {categoria}.
        Seja emp√°tico, adequado ao contexto e mantenha um tom profissional.
        
        Email recebido:
        "{email_texto[:400]}"
        
        Resposta:
        """
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente profissional que responde emails corporativos em portugu√™s."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150,
            temperature=0.7
        )
        
        resposta = response.choices[0].message.content.strip()
        return resposta
        
    except Exception as e:
        raise Exception(f"OpenAI error: {str(e)}")

def gerar_resposta_avancada(categoria: str, email_texto: str) -> str:
    """Sistema de fallback super-avan√ßado com m√∫ltiplas varia√ß√µes"""
    
    email_lower = email_texto.lower()
    hora_atual = datetime.now().hour
    saudacao = "Bom dia" if 5 <= hora_atual < 12 else "Boa tarde" if 12 <= hora_atual < 18 else "Boa noite"
    
    # Diferentes varia√ß√µes de respostas para cada cen√°rio
    respostas = {
        "Produtivo": {
            "saude": [
                f"{saudacao}, entendemos que voc√™ n√£o est√° se sentindo bem. A sa√∫de sempre vem em primeiro lugar! Por favor, descanse e cuide-se. Mantenha-nos informado sobre sua recupera√ß√£o e retorne quando estiver melhor. Desejamos r√°pida recupera√ß√£o!",
                f"{saudacao}, compreendemos perfeitamente sua situa√ß√£o de sa√∫de. Sua recupera√ß√£o √© o mais importante agora. Fique tranquilo(a) e priorize seu bem-estar. Estaremos aqui quando voc√™ voltar. Melhoras!",
                f"{saudacao}, agradecemos por nos informar sobre seu estado de sa√∫de. Por favor, descanse e se recupere completamente. N√£o se preocupe com nada aqui - sua sa√∫de √© prioridade total. Desejamos melhoras!"
            ],
            "familia": [
                f"{saudacao}, entendemos completamente que situa√ß√µes familiares exigem nossa aten√ß√£o imediata. Por favor, cuide de sua fam√≠lia que n√≥s cuidamos de tudo aqui. Retorne quando a situa√ß√£o estiver resolvida. For√ßa!",
                f"{saudacao}, fam√≠lia sempre em primeiro lugar! Compreendemos sua necessidade de aus√™ncia e apoiamos totalmente sua decis√£o. Cuide de seus entes queridos e retorne quando poss√≠vel. Estamos na torcida!",
                f"{saudacao}, situa√ß√µes familiares s√£o realmente priorit√°rias. Fique tranquilo(a) para resolver tudo o que for necess√°rio. Estaremos aqui dando suporte no que precisar. Conte conosco!"
            ],
            "tecnico": [
                f"{saudacao}, agradecemos pelo relato do problema t√©cnico. Nossa equipe especializada j√° foi acionada e est√° trabalhando ativamente na solu√ß√£o. Retornaremos em at√© 1 hora com atualiza√ß√µes. Obrigado pela paci√™ncia!",
                f"{saudacao}, identificamos o problema t√©cnico relatado. Nossos engenheiros j√° est√£o investigando a causa raiz e implementando a solu√ß√£o. Voc√™ receber√° uma atualiza√ß√£o em breve. Agradecemos sua compreens√£o!",
                f"{saudacao}, problema t√©cnico registrado com sucesso! Nossa equipe de TI est√° analisando e corrigindo a falha. Previs√£o de normaliza√ß√£o em at√© 2 horas. Obrigado por reportar!"
            ],
            "urgente": [
                f"{saudacao}, reconhecemos a urg√™ncia da situa√ß√£o! Este caso est√° sendo tratado com PRIORIDADE M√ÅXIMA. Toda nossa equipe est√° focada na resolu√ß√£o. Retornaremos em at√© 30 minutos. Obrigado!",
                f"{saudacao}, entendemos a criticalidade do assunto! Ativamos nosso protocolo de emerg√™ncia e alocamos todos os recursos necess√°rios. Solu√ß√£o em andamento - retorno em breve!",
                f"{saudacao}, situa√ß√£o de urg√™ncia identificada! Mobilizamos nossa equipe integral para resolver isso o mais r√°pido poss√≠vel. Voc√™ ser√° o primeiro a saber assim que resolvido."
            ],
            "geral": [
                f"{saudacao}, agradecemos seu contato! Sua solicita√ß√£o foi recebida e est√° sendo analisada por nossa equipe especializada. Retornaremos com uma solu√ß√£o em at√© 2 horas √∫teis. Obrigado!",
                f"{saudacao}, recebemos sua mensagem! Nossos analistas j√° est√£o trabalhando na sua demanda e em breve teremos uma resposta completa. Agradecemos sua confian√ßa!",
                f"{saudacao}, obrigado por entrar em contato! Sua requisi√ß√£o foi registrada e est√° em processamento. Retornaremos com novidades o mais breve poss√≠vel."
            ]
        },
        "Improdutivo": {
            "natal": [
                f"{saudacao}, que mensagem maravilhosa! Agradecemos de cora√ß√£o seus sinceros desejos natalinos. Que esta √©poca m√°gica traga muita luz, amor e prosperidade para voc√™ e todos os seus. Feliz Natal e um Ano Novo repleto de conquistas! üéÑüåü",
                f"{saudacao}, obrigado por seus calorosos votos! Que o esp√≠rito do Natal ilumine seu cora√ß√£o e que o novo ano traga realiza√ß√µes extraordin√°rias. Feliz Natal e Pr√≥spero Ano Novo para voc√™ e fam√≠lia! ‚ú®",
                f"{saudacao}, que alegria receber seus desejos natalinos! Que esta seja uma √©poca de renova√ß√£o e que 2024 seja repleto de sa√∫de, paz e sucesso. Felicidades a voc√™ e todos os seus!"
            ],
            "parabens": [
                f"{saudacao}, ficamos extremamente honrados e felizes com seu reconhecimento! Feedback como o seu √© o combust√≠vel que nos motiva a sempre dar o nosso melhor. Muito obrigado pela confian√ßa! üéâ",
                f"{saudacao}, que elogio incr√≠vel! Suas palavras aqueceram nosso cora√ß√£o e refor√ßam nosso compromisso com a excel√™ncia. √â um prazer imenso poder atend√™-lo! Obrigado! üåü",
                f"{saudacao}, agradecemos profundamente suas gentis palavras! Saber que nosso trabalho est√° fazendo a diferen√ßa √© a maior recompensa que poder√≠amos ter. Gratid√£o!"
            ],
            "agradecimento": [
                f"{saudacao}, √© n√≥s que agradecemos! Sua confian√ßa e parceria s√£o fundamentais para n√≥s. √â um enorme prazer poder contribuir com seu sucesso. Estamos sempre aqui para ajudar! üôè",
                f"{saudacao}, obrigado por seu agradecimento! Saber que estamos fazendo a diferen√ßa para voc√™ √© o que torna nosso trabalho especial. Conte sempre conosco! üíô",
                f"{saudacao}, gratid√£o √© nossa! Agradecemos por nos permitir fazer parte da sua jornada. Seu sucesso √© nossa maior motiva√ß√£o. Estamos √† disposi√ß√£o sempre!"
            ],
            "geral": [
                f"{saudacao}, agradecemos sinceramente sua mensagem! Ficamos muito felizes com seu contato e estamos sempre dispon√≠veis para o que precisar. Tenha um excelente dia! üòä",
                f"{saudacao}, que bom receber sua mensagem! Sua opini√£o √© muito importante para n√≥s. Estamos aqui para ajudar no que for necess√°rio. √ìtima semana! üåà",
                f"{saudacao}, obrigado por seu contato! Suas palavras s√£o muito valorizadas por nossa equipe. Estamos sempre √† disposi√ß√£o para servir voc√™ melhor. üí´"
            ]
        }
    }

    # Determinar o tipo espec√≠fico de mensagem
    if categoria == "Produtivo":
        if any(p in email_lower for p in ['indisgest√£o', 'enjoo', 'n√°usea', 'mal estar', 'febre', 'gripe', 'resfriado', 'temperatura', 'dor']):
            tipo = "saude"
        elif any(p in email_lower for p in ['filho', 'filha', 'crian√ßa', 'filhos', 'familia', 'familiar', 'parente', 'esposa', 'marido']):
            tipo = "familia"
        elif any(p in email_lower for p in ['urgente', 'emerg√™ncia', 'prioridade', 'cr√≠tico', 'importante', 'r√°pido', 'imediat']):
            tipo = "urgente"
        elif any(p in email_lower for p in ['sistema', 'login', 'acesso', 'erro', 'bug', 'problema', 'travou', 'lento']):
            tipo = "tecnico"
        else:
            tipo = "geral"
    else:
        if any(p in email_lower for p in ['natal', 'ano novo', 'r√©veillon', 'fim de ano']):
            tipo = "natal"
        elif any(p in email_lower for p in ['parab√©ns', 'congratula√ß√µes', 'excelente', 'fant√°stico', 'incr√≠vel']):
            tipo = "parabens"
        elif any(p in email_lower for p in ['obrigado', 'agrade√ßo', 'grato', 'gratid√£o']):
            tipo = "agradecimento"
        else:
            tipo = "geral"

    # Selecionar resposta aleat√≥ria do tipo apropriado
    resposta_escolhida = random.choice(respostas[categoria][tipo])
    return resposta_escolhida